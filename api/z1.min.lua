Z1_CSS="z1/z1.css"Z1_TEMP_SVG="z1/z1.temp.svg"PATTERN_FOLDER="z1/patterns/"Error={}function Error:new(a,b)local c={message=a,line=b}setmetatable(c,self)self.__index=self;return c end;function Error:print()if self.line then print(self.line..": "..self.message)else print("Error: "..self.message)end end;function Match_substr(d,e,f)local g,h=string.find(d,e,f)if not g then return nil end;return string.sub(d,g,h),h end;function Match_remove_substr(d,e,i,f)local j,h=Match_substr(d,e,f):gsub(i,"")return j,h end;function Split_string(k,l)for m in k:gmatch("[^"..(l or"%s").."]+")do coroutine.yield(m)end end;function Dump(n,o)if o==nil then o=0 end;if type(n)=='table'then if n.print==nil then local p='{ 'for q,r in pairs(n)do if type(q)~='number'then q='"'..q..'"'end;p=p..string.rep("\t",o)..'\n['..q..'] = '..Dump(r,o+1)..','end;return p..'} 'else return n:print():gsub("\n","\n"..string.rep("\t",o-1))end else return tostring(n)end end;Ligation={from=nil,to=nil}function Ligation:new(type,s,t,u)local c={type=type or"covalente",eletrons=s or 1,angle=t,angle3d=u}setmetatable(c,self)self.__index=self;return c end;AtomsInfo={{symbol="H",atomic_radius=53.0,atomic_number=1,color="0x00aaaaff"},{symbol="He",atomic_radius=31.0,atomic_number=2},{symbol="Li",atomic_radius=167.0,atomic_number=3},{symbol="Be",atomic_radius=112.0,atomic_number=4},{symbol="B",atomic_radius=87.0,atomic_number=5,color="0xdd00dd"},{symbol="C",atomic_radius=67.0,atomic_number=6,color="0xa200aaff"},{symbol="N",atomic_radius=56.0,atomic_number=7,color="0xa20000ff"},{symbol="O",atomic_radius=48.0,atomic_number=8,color="0xffa1a1"},{symbol="F",atomic_radius=42.0,atomic_number=9,color="0x660066"},{symbol="Ne",atomic_radius=38.0,atomic_number=10},{symbol="Na",atomic_radius=190.0,atomic_number=11,color="0xaffff00"},{symbol="Mg",atomic_radius=145.0,atomic_number=12},{symbol="Al",atomic_radius=118.0,atomic_number=13},{symbol="Si",atomic_radius=111.0,atomic_number=14},{symbol="P",atomic_radius=98.0,atomic_number=15,color="0xaaaa00"},{symbol="S",atomic_radius=88.0,atomic_number=16,color="0xffaaff"},{symbol="Cl",atomic_radius=79.0,atomic_number=17,color="0xa33aaff"},{symbol="Ar",atomic_radius=71.0,atomic_number=18},{symbol="K",atomic_radius=243.0,atomic_number=19},{symbol="Ca",atomic_radius=194.0,atomic_number=20,color="0xaffff00"},{symbol="Sc",atomic_radius=184.0,atomic_number=21},{symbol="Ti",atomic_radius=176.0,atomic_number=22},{symbol="V",atomic_radius=171.0,atomic_number=23},{symbol="Cr",atomic_radius=166.0,atomic_number=24},{symbol="Mn",atomic_radius=161.0,atomic_number=25},{symbol="Fe",atomic_radius=156.0,atomic_number=26},{symbol="Co",atomic_radius=152.0,atomic_number=27},{symbol="Ni",atomic_radius=149.0,atomic_number=28},{symbol="Cu",atomic_radius=145.0,atomic_number=29},{symbol="Zn",atomic_radius=142.0,atomic_number=30},{symbol="Ga",atomic_radius=136.0,atomic_number=31},{symbol="Ge",atomic_radius=125.0,atomic_number=32},{symbol="As",atomic_radius=114.0,atomic_number=33},{symbol="Se",atomic_radius=103.0,atomic_number=34},{symbol="Br",atomic_radius=94.0,atomic_number=35},{symbol="Kr",atomic_radius=88.0,atomic_number=36},{symbol="Rb",atomic_radius=265.0,atomic_number=37},{symbol="Sr",atomic_radius=219.0,atomic_number=38},{symbol="Y",atomic_radius=212.0,atomic_number=39},{symbol="Zr",atomic_radius=206.0,atomic_number=40},{symbol="Nb",atomic_radius=198.0,atomic_number=41},{symbol="Mo",atomic_radius=190.0,atomic_number=42},{symbol="Tc",atomic_radius=183.0,atomic_number=43},{symbol="Ru",atomic_radius=178.0,atomic_number=44},{symbol="Rh",atomic_radius=173.0,atomic_number=45},{symbol="Pd",atomic_radius=169.0,atomic_number=46},{symbol="Ag",atomic_radius=165.0,atomic_number=47},{symbol="Cd",atomic_radius=161.0,atomic_number=48},{symbol="In",atomic_radius=156.0,atomic_number=49},{symbol="Sn",atomic_radius=145.0,atomic_number=50},{symbol="Sb",atomic_radius=133.0,atomic_number=51},{symbol="Te",atomic_radius=123.0,atomic_number=52},{symbol="I",atomic_radius=115.0,atomic_number=53},{symbol="Xe",atomic_radius=108.0,atomic_number=54},{symbol="Cs",atomic_radius=298.0,atomic_number=55},{symbol="Ba",atomic_radius=253.0,atomic_number=56},{symbol="La",atomic_radius=nil,atomic_number=57},{symbol="Ce",atomic_radius=nil,atomic_number=58},{symbol="Pr",atomic_radius=247.0,atomic_number=59},{symbol="Nd",atomic_radius=206.0,atomic_number=60},{symbol="Pm",atomic_radius=205.0,atomic_number=61},{symbol="Sm",atomic_radius=238.0,atomic_number=62},{symbol="Eu",atomic_radius=231.0,atomic_number=63},{symbol="Gd",atomic_radius=233.0,atomic_number=64},{symbol="Tb",atomic_radius=225.0,atomic_number=65},{symbol="Dy",atomic_radius=228.0,atomic_number=66},{symbol="Ho",atomic_radius=nil,atomic_number=67},{symbol="Er",atomic_radius=226.0,atomic_number=68},{symbol="Tm",atomic_radius=222.0,atomic_number=69},{symbol="Yb",atomic_radius=222.0,atomic_number=70},{symbol="Lu",atomic_radius=217.0,atomic_number=71},{symbol="Hf",atomic_radius=208.0,atomic_number=72},{symbol="Ta",atomic_radius=200.0,atomic_number=73},{symbol="W",atomic_radius=193.0,atomic_number=74},{symbol="Re",atomic_radius=188.0,atomic_number=75},{symbol="Os",atomic_radius=185.0,atomic_number=76},{symbol="Ir",atomic_radius=180.0,atomic_number=77},{symbol="Pt",atomic_radius=177.0,atomic_number=78},{symbol="Au",atomic_radius=174.0,atomic_number=79},{symbol="Hg",atomic_radius=171.0,atomic_number=80},{symbol="Tl",atomic_radius=156.0,atomic_number=81},{symbol="Pb",atomic_radius=154.0,atomic_number=82},{symbol="Bi",atomic_radius=143.0,atomic_number=83},{symbol="Po",atomic_radius=135.0,atomic_number=84},{symbol="At",atomic_radius=nil,atomic_number=85},{symbol="Rn",atomic_radius=120.0,atomic_number=86},{symbol="Fr",atomic_radius=270.0,atomic_number=87},{symbol="Ra",atomic_radius=nil,atomic_number=88},{symbol="Ac",atomic_radius=nil,atomic_number=89},{symbol="Th",atomic_radius=nil,atomic_number=90},{symbol="Pa",atomic_radius=nil,atomic_number=91},{symbol="U",atomic_radius=nil,atomic_number=92},{symbol="Np",atomic_radius=nil,atomic_number=93},{symbol="Pu",atomic_radius=nil,atomic_number=94},{symbol="Am",atomic_radius=nil,atomic_number=95},{symbol="Cm",atomic_radius=nil,atomic_number=96},{symbol="Bk",atomic_radius=nil,atomic_number=97},{symbol="Cf",atomic_radius=nil,atomic_number=98},{symbol="Es",atomic_radius=nil,atomic_number=99},{symbol="Fm",atomic_radius=nil,atomic_number=100},{symbol="Md",atomic_radius=nil,atomic_number=101},{symbol="No",atomic_radius=nil,atomic_number=102},{symbol="Lr",atomic_radius=nil,atomic_number=103},{symbol="Rf",atomic_radius=nil,atomic_number=104},{symbol="Db",atomic_radius=nil,atomic_number=105},{symbol="Sg",atomic_radius=nil,atomic_number=106},{symbol="Bh",atomic_radius=nil,atomic_number=107},{symbol="Hs",atomic_radius=nil,atomic_number=108},{symbol="Mt",atomic_radius=nil,atomic_number=109},{symbol="Ds",atomic_radius=nil,atomic_number=110},{symbol="Rg",atomic_radius=nil,atomic_number=111},{symbol="Cn",atomic_radius=nil,atomic_number=112},{symbol="Nh",atomic_radius=nil,atomic_number=113},{symbol="Fl",atomic_radius=nil,atomic_number=114},{symbol="Mc",atomic_radius=nil,atomic_number=115},{symbol="Lv",atomic_radius=nil,atomic_number=116},{symbol="Ts",atomic_radius=nil,atomic_number=117},{symbol="Og",atomic_radius=nil,atomic_number=118}}function AtomsInfo:find(v)for w,x in ipairs(self)do if x.symbol==v then return x end end;return nil end;Atom={last_id=1}function Atom:new(v,y)Atom.last_id=Atom.last_id+1;local c={id=Atom.last_id,symbol=v,charge=y or 0,ligations={},ligation_num=0,parent=nil,x=nil,y=nil}local z=AtomsInfo:find(v)if z then for A,B in pairs(z)do c[A]=B end end;setmetatable(c,self)self.__index=self;return c end;function Atom:set_parent(C)self.parent=C.from;self.parent_ligation=C;self.ligation_num=self.ligation_num+1 end;function Atom:add_ligation(D)table.insert(self.ligations,D)self.ligation_num=self.ligation_num+1 end;function Atom:print()return"Atom {".."\n\tatomic number: "..self.atomic_number.."\n\tsymbol: "..self.symbol.."\n\tcharge: "..self.charge.."\n\tatomic radius: "..self.atomic_radius.."\n}"end;Handling={tags={},atoms={},ligations={}}function Handling:new()local c={}setmetatable(c,self)self.__index=self;return c end;function Handling:split_params(b,l)local E={}l=l or"%s"for m in b:gmatch("[^"..l.."]+")do table.insert(E,m)end;return E end;function Handling:remove_comment(b)local F=string.find(b,"%-%-")if F then return b:sub(1,F-1)end;return b end;function Handling:handle_line_tag(b)local d=Match_substr(b,"@tag%s%a+"):gsub("@tag%s","")if not d then return end;table.insert(self.tags,d)end;function Handling:handle_line_atom(b)local d=self:remove_comment(b)local v,G=Match_substr(d,"[A-Z][a-z]?")if not v then return nil,Error:new("symbol not found")end;local H,I=Match_substr(d,"[+|-]%d")local y=0;if H then H=H:gsub("[+|-]","")y=tonumber(H)end;local x=Atom:new(v,y)table.insert(self.atoms,x)local J=(I and I or G)+1;local K=b:sub(J)if not K then return end;local L=coroutine.wrap(Split_string)local M=L(K)while M do if not self.ligations[M]then self.ligations[M]=Ligation:new()end;if not self.ligations[M].from then self.ligations[M].from=x;x:add_ligation(self.ligations[M])else self.ligations[M].to=x;x:set_parent(self.ligations[M])end;M=L()end end;function Handling:handle_line_ligation(b)local N=Match_substr(b,"%d+")local function O(P)if P=="c"then return"covalente"elseif P=='d'then return"covalente dativa"elseif P=='h'then return"hidrogênio"elseif P=='i'then return"iônica"end;return nil end;local Q=Match_substr(b,"[i|d|h|c];")local type=nil;if Q then type=O(Q:gsub(";",""))end;local function R(P)if P=="-"then return 1 elseif P=='='then return 2 elseif P=='%'then return 3 end end;local S=Match_substr(b,"[-|=|%%]")local s=R(S)local T=Match_substr(b,"%d+°")local t=nil;if T then local p=string.gsub(T,"°","")t=tonumber(p)end;local U=Match_substr(b,"%b[]")local V=nil;if U then local W,X=Match_substr(U,"-?%d+")local Y=Match_substr(U,"-?%d+",X+1)local Z=tonumber(W)local _=tonumber(Y)V={Z,_}end;if not self.ligations[N]then self.ligations[N]=Ligation:new(type,s,t,V)else if type then self.ligations[N].type=type end;if s then self.ligations[N].eletrons=s end;if t then self.ligations[N].angle=t end;if V then self.ligations[N].angle3d=V end end;return nil end;function Handling:handle_line_pattern(b)local a0=Match_remove_substr(b,"@p%s[%a|_]+","@p%s")local e=io.open(PATTERN_FOLDER..a0 ..".pre.z1","r")if e==nil then return Error:new("Pattern '"..a0 .."' not found")end;local a1=e:read("*a")e:close()local E=self:split_params(b)local a2=self:split_params(E[3],",")for q,a3 in ipairs(a2)do a1=a1:gsub("$"..q,a3)end;return self:handle_sections(a1)end;function Handling:handle_line_name(b)local a4=Match_remove_substr(b,"@name%s.+","@name%s")self.name=a4 end;function Handling:handle_sections(d)for b in d:gmatch("[^\n]+")do if string.find(b,"@name$s[%a+]")then self:handle_line_name(b)elseif string.find(b,"@tag %a+")then local a5=self:handle_line_tag(b)table.insert(self.tags,a5)elseif string.find(b,"@p ")then local a6=self:handle_line_pattern(b)if a6 then return a6 end elseif string.find(b,"[A-Z][a-z]?%s[+|-0-9]?[%s%d+]*")then local x,a6=self:handle_line_atom(b)if a6 then return a6 end elseif string.find(b,"[%d+|@%a+][%s%d+°]?[%s@type-h|c|d|i]?[%s-|=|%%]?[%s%b[%d+%s%d+]]?")then local a6=self:handle_line_ligation(b)if a6 then return a6 end end end;return nil end;function Handling:print()print("TAGS:")for w,a5 in ipairs(self.tags)do print(a5)end;print("\nATOMS:")for w,x in ipairs(self.atoms)do print(x.symbol)for q,a7 in ipairs(x.ligations)do print("  "..q.." - "..a7.to.symbol)end end;print("\nLIGATIONS:")for A,D in pairs(self.ligations)do print(D.angle)end end;local a8=CONTENT;local a9=Handling:new()local a6=a9:handle_sections(a8)if a6 then a6:print()os.exit(1)end;local aa=arg[1]local ab=nil;Svg={content=""}function Svg:new()local c={}setmetatable(c,self)self.__index=self;return c end;function Svg:line(ac,ad,ae,af,ag)if ag==nil then ag='svg-ligation'end;self.content=string.format('%s<line class="%s" x1="%g" y1="%g" x2="%g" y2="%g"></line>',self.content,ag,ac,ad,ae,af)end;function Svg:circle(ah,ai,aj)self.content=string.format('%s<circle class="svg-eletrons" cx="%g" cy="%g" r="%g"></circle>',self.content,ah,ai,aj)end;function Svg:text(v,ah,ai)self.content=string.format('%s<text class="svg-element svg-element-%s" x="%g" y="%g">%s</text>',self.content,v,ah,ai,v)end;function Svg:subtext(v,ah,ai)self.content=string.format('%s<circle class="svg-element-charge-border" cx="%g" cy="%g"/><text class="svg-element-charge" x="%g" y="%g">%s</text>',self.content,ah,ai,ah,ai,v)end;function Svg:build(ak,al)local am=io.open(Z1_CSS,"r")if am==nil then return nil,Error:new("Template 'z1.css' não encontrado")end;local an=am:read("*a")an=an:gsub("[\n|\t]","")io.close(am)local ao=io.open(Z1_TEMP_SVG,"r")if ao==nil then return nil,Error:new("Template 'z1.temp.svg' não encontrado")end;local ap=ao:read("*a")io.close(ao)local aq=string.format(ap,ak,al,an,self.content)return aq,nil end;Z13={}function Z13:new()local c={atoms={}}setmetatable(c,self)self.__index=self;return c end;function Z13:add(ar,as,ah,ai,at)local x={color=ar,radius=as,x=ah,y=ai,z=at}table.insert(self.atoms,x)end;function Z13:build(ak,al,au)local a8=string.format("%.2f %.2f %.2f",ak,al,au)for w,x in ipairs(self.atoms)do a8=string.format("%s\n%s %.2f %.2f %.2f %.2f",a8,x.color,x.radius,x.x,x.y,x.z)end;return a8 end;BORDER=20;STANDARD_LIGATION_SIZE=30;Plugin={svg=Svg:new()}function Plugin:new(n)local c={tags=n.tags,atoms=n.atoms,ligations=n.ligations}setmetatable(c,self)self.__index=self;return c end;function Plugin:build()self:calcAtomsPosition()local av=self:measureBounds()if av~=nil then return nil,av end;av=self:drawAtom()if av~=nil then return nil,av end;av=self:drawLigation()if av~=nil then return nil,av end;local aw,ax=self.svg:build(self.width,self.height)return aw,ax end;function Plugin:calcAtomsPosition(x,ay,D,az)if x==nil then x=self.atoms[1]end;if x.already==true then return end;if D and ay then if not D.angle then local aA=x.parent_ligation and x.parent_ligation.angle or 0;local aB=aA+180;local aC=360/x.ligation_num;local aD=aB+aC*(az+(x.parent_ligation and 1 or 0))D.angle=math.floor(aD%360)end end;local ah=0;local ai=0;if ay~=nil and D then local aE=math.pi*D.angle/180;ah=ay.x+math.cos(aE)*STANDARD_LIGATION_SIZE;ai=ay.y+math.sin(aE)*STANDARD_LIGATION_SIZE end;x.x=ah;x.y=ai;x.already=true;for aF,aG in ipairs(x.ligations)do self:calcAtomsPosition(aG.to,x,aG,aF)end end;function Plugin:drawAtom()return Error:new("Method drawAtom not Implemented")end;function Plugin:drawLigation()return Error:new("Method drawLigation not Implemented")end;function Plugin:measureBounds()local aH=0;local aI=0;local aJ=0;local aK=0;for w,x in ipairs(self.atoms)do local ah=x["x"]local ai=x["y"]if x["symbol"]=="X"then goto aL end;if ah>aJ then aJ=ah end;if ai>aK then aK=ai end;if ah<aH then aH=ah end;if ai<aI then aI=ai end::aL::end;local aM=aJ+-aH;local aN=aK+-aI;self.width=BORDER*2+aM;self.height=BORDER*2+aN;self.center_x=BORDER+math.abs(aH)self.center_y=BORDER+math.abs(aI)return nil end;if aa=="standard"then STANDARD_ATOM_RADIUS=9;StandardPlugin={}function StandardPlugin:new(aO)local c=StandardPlugin;local P=Plugin:new(aO)setmetatable(self,c)self.__index=P;return c end;function StandardPlugin:drawAtom()for w,x in ipairs(self.atoms)do local v=x["symbol"]local ah=self.center_x+x["x"]local ai=self.center_y+x["y"]if v=="X"then goto aL end;self.svg:text(x["symbol"],ah,ai)local y=x["charge"]if y~=0 then if y==1 then y="+"end;if y==-1 then y="-"end;self.svg:subtext(y,ah+STANDARD_ATOM_RADIUS,ai-STANDARD_ATOM_RADIUS)end::aL::end;return nil end;STANDARD_DISTANCE_BETWEEN_LIGATIONS=20;STANDARD_WAVES={{0},{STANDARD_DISTANCE_BETWEEN_LIGATIONS/2,-STANDARD_DISTANCE_BETWEEN_LIGATIONS/2},{STANDARD_DISTANCE_BETWEEN_LIGATIONS,0,-STANDARD_DISTANCE_BETWEEN_LIGATIONS}}function StandardPlugin:drawLigation()for w,D in pairs(self.ligations)do local aP=D.from;local aQ=D.to;if aQ.symbol=="X"then goto aL end;local ac=self.center_x+aP.x;local ad=self.center_y+aP.y;local ae=self.center_x+aQ.x;local af=self.center_y+aQ.y;local aR=STANDARD_WAVES[D.eletrons]local aS=math.atan(af-ad,ae-ac)local aT=math.pi+aS;if D.type~="iônica"then for w,t in ipairs(aR)do local aU=ac+math.cos(aS-math.pi*t/180)*STANDARD_ATOM_RADIUS;local aV=ad+math.sin(aS-math.pi*t/180)*STANDARD_ATOM_RADIUS;local aW=ae+math.cos(aT+math.pi*t/180)*STANDARD_ATOM_RADIUS;local aX=af+math.sin(aT+math.pi*t/180)*STANDARD_ATOM_RADIUS;self.svg:line(aU,aV,aW,aX)end end::aL::end;return nil end;ab=StandardPlugin:new(a9)elseif aa=="z13"then Z13Plugin={}function Z13Plugin:new(aO)local c={z13=Z13:new(),atoms=aO.atoms}setmetatable(c,self)self.__index=self;return c end;function Z13Plugin:measureBounds()local aH=0;local aI=0;local aY=0;local aJ=0;local aK=0;local aZ=0;for w,x in ipairs(self.atoms)do local ah=x["x"]local ai=x["y"]local at=x["z"]if x["symbol"]=="X"then goto aL end;if ah>aJ then aJ=ah end;if ai>aK then aK=ai end;if at>aZ then aZ=at end;if ah<aH then aH=ah end;if ai<aI then aI=ai end;if at<aY then aY=at end::aL::end;self.width=aJ+math.abs(aH)self.height=aK+math.abs(aI)self.depth=aZ+math.abs(aY)self.center_x=aH+self.width/2;self.center_y=aI+self.height/2;self.center_z=aY+self.depth/2;return nil end;function Z13Plugin:calcAtomsPosition(x,ay,D,az)if x==nil then x=self.atoms[1]end;if x.already==true then return end;local ah=0;local ai=0;local at=0;if ay~=nil and D~=nil then local as=x.atomic_radius+ay.atomic_radius;if D.type=="iônica"then as=as+60 else as=as-20 end;if D and ay then if not D.angle then local aA=x.parent_ligation and x.parent_ligation.angle or 0;local aB=aA;local aC=360/ay.ligation_num;local aD=aB+aC*(az-1+(x.parent_ligation and 1 or 0))D.angle=math.floor(aD%360)end end;if not D.angle3d then D.angle3d={(D.angle or 0)+90,90}end;local a_=math.pi*D.angle3d[1]/180;local b0=math.pi*D.angle3d[2]/180;ah=ay.x+as*math.sin(a_)*math.cos(b0)ai=ay.y+as*math.cos(a_)at=ay.z+as*math.sin(a_)*math.sin(b0)end;x.x=math.floor(ah)x.y=math.floor(ai)x.z=math.floor(at)x.already=true;for aF,aG in ipairs(x.ligations)do self:calcAtomsPosition(aG.to,x,aG,aF)end end;function Z13Plugin:drawAtom()for w,x in ipairs(self.atoms)do if x.symbol=="X"then goto aL end;self.z13:add(x.color,x.atomic_radius,x.x-self.center_x,x.y-self.center_y,x.z-self.center_z)::aL::end;return nil end;function Z13Plugin:build()self:calcAtomsPosition()self:measureBounds()local av=self:drawAtom()if av~=nil then return nil,av end;local b1,ax=self.z13:build(self.width,self.height,self.depth)return b1,ax end;ab=Z13Plugin:new(a9)end;if ab==nil then Error:new("Plugin not found"):print()os.exit(1)end;local aw,av=ab:build()if av~=nil then av:print()end;print(aw)